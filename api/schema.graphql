scalar GraphQLDate

type Item {
  _id: ID!
  id: Int!
  typeName: String!
  balance: Float!
}

type User {
  _id: ID!
  id: Int!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  balance: Float!
}

type History {
  _id: ID!
  id: Int!
  time: String!
  balance: Float!
}

type Type {
  _id: ID!
  id: Int!
  typeName: String!
  price: Float!
}

type Balance {
  balance: Float!
}

type CurrentUser {
  currentId: Int!
  email: String!
}

input HistoryInputs {
  userId: Int!
  balance: Float!
}

input UserInputs {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input WalletItemInput {
  userId: Int!
  id: Int!
  modification: Float!
}

input WalletConvertItemInput {
  userId: Int!
  idFrom: Int!
  idTo: Int!
  modification: Float!
}

input TopupInput {
  userId: Int!
  amount: Float!
}

##### Top level declarations

type Query {
  about: String!
  users: [User]!
  userFind(email: String!): User!
  login(user: UserInputs!): String!
  logout: String!
  historyList(userId: Int!): [History]!
  typesList: [Type!]!
  typeFind(id: Int!): Type!
  walletDetail(userId: Int!): [Item]!
  balanceDetail(userId: Int!): Float!
  currentUserQuery: CurrentUser!
}

type Mutation {
  setAboutMessage(message: String!): String!
  register(user: UserInputs!): String!
  addHistory(history: HistoryInputs!): History!
  walletItemBuy(item: WalletItemInput!): String!
  walletItemSell(item: WalletItemInput!): String!
  walletItemConvert(item: WalletConvertItemInput!): String!
  topup(topupInput: TopupInput!): Float!
}
